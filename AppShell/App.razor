@using System.Reflection

@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger<App> Logger

<Router AppAssembly="@typeof(App).Assembly" 
    AdditionalAssemblies="@lazyLoadedAssemblies" 
    OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private List<Assembly> lazyLoadedAssemblies = new();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            //Load Module A and B together (assuming they are perhaps related)
            if ( args.Path.StartsWith("ModuleA") || 
                 args.Path.StartsWith("ModuleB") )
            { 
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { "ModuleA.dll", "ModuleB.dll" });
                lazyLoadedAssemblies.AddRange(assemblies);
            }

            //Load Module C separately if called
            if (args.Path.StartsWith("ModuleC"))
                lazyLoadedAssemblies.AddRange(await AssemblyLoader.LoadAssembliesAsync(
                        new[] { "ModuleC.dll" }));
        }
           catch (Exception ex)
           {
               Logger.LogError("Error: {Message}", ex.Message);
           }
    }
}